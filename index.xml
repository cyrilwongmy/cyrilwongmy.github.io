<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mingyan&#39;s blog</title>
    <link>https://cyrilwongmy.github.io/</link>
    <description>Recent content on Mingyan&#39;s blog</description>
    <generator>Hugo -- 0.147.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jun 2025 23:11:18 -0700</lastBuildDate>
    <atom:link href="https://cyrilwongmy.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An introduction to Kafka’s High‑Performance Binary RPC Protocol (Part 3)</title>
      <link>https://cyrilwongmy.github.io/blog/03-kafka-03-kafka-message-protocol/</link>
      <pubDate>Fri, 06 Jun 2025 23:11:18 -0700</pubDate>
      <guid>https://cyrilwongmy.github.io/blog/03-kafka-03-kafka-message-protocol/</guid>
      <description>&lt;h1 id=&#34;why-did-kafka-reinvent-rpc&#34;&gt;Why Did Kafka Re‑Invent RPC?&lt;/h1&gt;
&lt;h2 id=&#34;11-performance&#34;&gt;1.1 Performance&lt;/h2&gt;
&lt;p&gt;HTTP 1.x and gRPC are convenient, but too heavyweight for a &lt;strong&gt;high‑throughput, low‑latency &lt;em&gt;durable&lt;/em&gt; log&lt;/strong&gt;. Each HTTP header on a TCP frame adds unnecessary bytes to every message. Even Protobuf&amp;rsquo;s var‑int encoding becomes a bottleneck when allocating thousands of objects per millisecond, putting strain on heap memory and garbage collection.&lt;/p&gt;
&lt;h2 id=&#34;12-seamless-evolution&#34;&gt;1.2 Seamless Evolution&lt;/h2&gt;
&lt;p&gt;The Apache community&amp;rsquo;s &amp;ldquo;&lt;strong&gt;don&amp;rsquo;t break users&lt;/strong&gt;&amp;rdquo; philosophy requires brokers and clients to communicate across major versions. Their solution: a custom protocol with &lt;strong&gt;tagged fields&lt;/strong&gt; that allows new data to be appended to message ends. Like HTTP/2 frames, older clients can safely ignore unknown tags.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka High-Throughput Architecture: Demystifying the Reactor Pattern (Part 2)</title>
      <link>https://cyrilwongmy.github.io/blog/02-kafka-02-kafka-reactor/</link>
      <pubDate>Sun, 01 Jun 2025 00:02:56 -0700</pubDate>
      <guid>https://cyrilwongmy.github.io/blog/02-kafka-02-kafka-reactor/</guid>
      <description>&lt;p&gt;This is part 2 of the Kafka series. In this part, we will dive into the Reactor pattern and how Kafka implements it. In the next following series, we will dive into each component of the Reactor pattern.&lt;/p&gt;
&lt;p&gt;The source code referenced in this article uses Kafka&amp;rsquo;s trunk branch. I&amp;rsquo;ve pushed it to my personal repo for version alignment with this article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyrilwongmy/kafka-src-reading&#34;&gt;https://github.com/cyrilwongmy/kafka-src-reading&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-reactor-pattern&#34;&gt;What is the Reactor Pattern?&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(Readers familiar with the Reactor pattern can skip to the &lt;a href=&#34;#kafka-s-reactor-implementation&#34;&gt;Kafka&amp;rsquo;s Reactor Implementation&lt;/a&gt; section)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka’s TCP Unpacking: A Production-Grade Code Walkthrough (Part 1)</title>
      <link>https://cyrilwongmy.github.io/blog/01-kafka-01-tcp-fragmentation/</link>
      <pubDate>Thu, 29 May 2025 22:03:53 -0700</pubDate>
      <guid>https://cyrilwongmy.github.io/blog/01-kafka-01-tcp-fragmentation/</guid>
      <description>&lt;p&gt;This is part 1 of the Kafka series. The Kafka series is a series of blog posts that will introduce the design and implementation details of Kafka.&lt;/p&gt;
&lt;p&gt;The source code referenced in this article uses Kafka&amp;rsquo;s trunk branch. I&amp;rsquo;ve pushed it to my personal repo for version alignment with this article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyrilwongmy/kafka-src-reading&#34;&gt;https://github.com/cyrilwongmy/kafka-src-reading&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;tcp-and-packet-fragmentation&#34;&gt;&lt;strong&gt;TCP and Packet Fragmentation&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;why-does-tcp-require-packet-fragmentation&#34;&gt;&lt;strong&gt;Why Does TCP Require Packet Fragmentation?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kafka uses TCP as its underlying transport layer protocol. TCP operates as a continuous byte stream without inherent message boundaries. Therefore, any application using TCP must implement its own mechanism to delineate message boundaries.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
